class Solution {
  public:
   
    long long gcd(long long a, long long b){
        if(a==0) return b;
        return gcd(b%a,a);
    }
    
    long long int BoundaryCount(long long int p[], long long int q[]){
        if(p[0]==q[0]){
            return abs(p[1]-q[1])-1;  
        }
        if(p[1]==q[1]){
            return abs(p[0]-q[0])-1;
        }
        else{
            return gcd(abs(p[0]-q[0]),abs(p[1]-q[1]))-1;
        }
                                    
    }
    long long int InternalCount(long long int p[], long long int q[],
                                long long int r[]) {
        
        long long area= abs((p[0]*(q[1]-r[1])+q[0]*(r[1]-p[1])+r[0]*(p[1]-q[1])));
        
        long long boundarypoints=BoundaryCount(p,q)+BoundaryCount(q,r)+BoundaryCount(r,p)+3;
        
        // formula :   area= integralpoint + boundarypoint/2 -1;
        
        long long integralPoint= ((area) - boundarypoints + 2)/2;
        return integralPoint;
    }
};
